c
exit
c
self.shopping_basket.products.map{c}
self.shopping_basket.products
self.shopping_basket.products.first.tax
self.shopping_basket.products.first
self.shopping_basket.products
@products
self.shopping_basket.products.first.product
self.shopping_basket.products.first
self.shopping_basket.products
self.shopping_basket.products.first.prodcut
self.shopping_basket.products.first
self.shopping_basket
self.shopping_basket.products.first
ProductDecorator.new(self.shopping_basket.products.first).tax
ProductDecorator.new(self.shopping_basket.products.first)
self.shopping_basket.products.sum{ |product| ProductDecorator.new(product).send('tax')}
prodcuts
self.
self.products.sum{ |product| ProductDecorator.new(product).send('tax')}
self
@products
 @products.sum{ |product| ProductDecorator.new(product).send('tax')}
 @products.sum{ |product| ProductDecorator.new(product).send(tax)}
 @products.sum{ |product| ProductDecorator.new(product).send(:tax)}
shopping_basket.products[2].tax
shopping_basket.products[3].tax
shopping_basket.products[1].tax
shopping_basket.products[1]
shopping_basket.products[0]
shopping_basket.products.size
shopping_basket.products.second
shopping_basket.products.second.tax
shopping_basket.products.first.tax
shopping_basket.products.first
shopping_basket.products
shopping_basket.first.products
shopping_basket
 shopping_basket.sales_taxes
shopping_basket.products.first.description
shopping_basket.products.first
shopping_basket.products
c
self.product
c
self.product
c
self.product
c
self.product
c
print @shopping_basket.products.map{|c| c.description}.join
prints @shopping_basket.products.map{|c| c.description}.join
p @shopping_basket.products.map{|c| c.description}.join
@shopping_basket.products.map{|c| c.description}.join
@shopping_basket.products.map{|c| c.description}
@shopping_basket.map{|c| c.description}
@shopping_basket.products.first.description
@shopping_basket.products.first
@shopping_basket.products.size
@shopping_basket
shopping_basket
products
self.products
self
shopping_basket.products
c
@shopping_basket
c
self.shopping_basket.products.first.description
self.shopping_basket.products.first.details
self.shopping_basket.products.first
self.shopping_basket
c
self.shopping_basket
self.shopping_basket.products
self.shopping_basket.products.first
self.shopping_basket.products.first.description
self.shopping_basket.products
self.shopping_basket
self
exit
c
cc
c
n
product_decorator.product.exempted?
product_decorator.product.exempted
product_decorator.product
c
ImportDutyTaxCalculator.calculate(product)
BasicTaxCalculator.calculate(product)
c
pp.total
pp
c
(11.25 * 3) + (11.25 * 5 / 100)
11.25 * 3
11.25 * 4
pp.total
pp
c
BasicTaxCalculator.calculate(product)
52.25 + 2.4
52.25 + 2.375
47.5 * 5 / 100 
47.5 * 10 / 100 + 47.5
47.5 * 10 / 100 
product
total_tax_amount
exit
c
ProductDecorator.new(product).total.round(2)
ProductDecorator.new(product).total.round
ProductDecorator.new(product).total
c
ProductDecorator.new(product).total
ProductDecorator.new(product)
product.
c
product.tax
product
product.total
c
basic_tax
c
 product.exempted?
product.imported?
c
product.imported
product
product.imported
import_duty
basic_tax
c
product
product.total
c
TaxCalculator.new.inspect
TaxCalculator.new
product
 TaxCalculator.new(product)
TaxCalculator.new(product).calculate_tax
c
product
self.product
self
c
product.total
product.toal
c
product.total
exit
product.total
product
product.product
product
product.quantity
product
product.total
product
exit
product.total
product.description
exit
product.description
product.total
product
product.total
c
product.total
c
TaxCalculator.new(product).calculate_tax
TaxCalculator.new(product: product).calculate_tax
TaxCalculator.new.calculate_tax
TaxCalculator.new(self).calculate_tax
product.total
product
c
product.total
product
exit
TaxCalculator.calculate_tax
TaxCalculator
product.total
product
exit
product.total
product.details
product.product
product
